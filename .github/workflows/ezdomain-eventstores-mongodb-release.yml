name: Release EzDomain.EventStores.MongoDb solution (to NuGet)

on:
  workflow_dispatch:
    branches: [ release ]
    inputs:
      Major:
        description: 'Major version'
        required: true
        default: '8'
        type: choice
        options:
          - '7'
          - '8'
      Minor:
        description: 'Increment Minor version'
        required: true
        default: false
        type: boolean
      Patch:
        description: 'Increment Patch version'
        required: true
        default: false
        type: boolean

defaults:
  run:
    working-directory: ./src/EzDomain.EventStores.MongoDb

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: release
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET 7
      uses: actions/setup-dotnet@v4
      with: 
        dotnet-version: 7.0.x
    - name: Update version in csproj
      id: update_version
      run: |
        MAJOR=${{ github.event.inputs.Major }}
        MINOR=${{ github.event.inputs.Minor }}
        PATCH=${{ github.event.inputs.Patch }}

        VERSION=$(grep -oP '(?<=<Version>).*?(?=</Version>)' EzDomain.EventStores.Mongodb.csproj)
        IFS='.' read -ra ADDR <<< "$VERSION"
        if [[ "ADDR[0]" != $MAJOR ]]; then
          ADDR[0]=$MAJOR
          ADDR[1]=0
          ADDR[2]=0
        fi
        if [[ "$MINOR" == 'true' ]]; then
          ADDR[1]=$((ADDR[1] + 1))
          ADDR[2]=0
        fi
        if [[ "$PATCH" == 'true' ]]; then
          ADDR[2]=$((ADDR[2] + 1))
        fi
        NEW_VERSION="${ADDR[0]}.${ADDR[1]}.${ADDR[2]}"
        echo "Old assembly version:" $VERSION
        echo "New assembly version:" $NEW_VERSION
        sed -i "s/<Version>[0-9]*\.[0-9]*\.[0-9]*<\/Version>/<Version>$NEW_VERSION<\/Version>/g" EzDomain.EventStores.MongoDb.csproj
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'github-actions@github.com'
        git pull
        git add EzDomain.EventStores.MongoDb.csproj
        git commit --allow-empty -m "Assembly version update to: $NEW_VERSION"
        git push

        echo "::set-output name=new_version::$NEW_VERSION"
    - name: Build and pack
      run: |
        dotnet build --configuration Publish
        dotnet pack --configuration Publish --output publish

    - name: Push to NuGet
      run: |
        dotnet nuget push ./publish/EzDomain.EventStores.MongoDb.${{ steps.update_version.outputs.new_version }}.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

    - name: Rollback version if push failed
      if: ${{ failure() }}
      run: git checkout -- EzDomain.EventStores.MongoDb.csproj